# Install prerequisites

- name: Install awscli
  community.general.homebrew:
    name: awscli

- name: "Install 1Password CLI"
  community.general.homebrew_cask:
    name: 1password-cli
    state: present


# Ensure 1Password is signed in, we'll use that to pull AWS credentials

- name: "Check if 1Password is signed in"
  shell:
    cmd: 'op account get'
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0


# iTerm configuration

- name: "Fetch iTerm config"
  shell:
    cmd: 'op run --env-file="aws.env" -- aws s3 cp s3://cbw-app-data/iterm/com.googlecode.iterm2.plist ~/Library/Preferences/'
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0


# Alfred configuration

- name: "Fetch Alfred config"
  shell:
    cmd: 'op run --env-file="aws.env" -- aws s3 cp s3://cbw-app-data/alfred/alfred.zip /tmp/'
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0

- name: "Create Alfred config directory if it does not exist"
  ansible.builtin.file:
    path: "~/Library/Application Support/Alfred"
    state: directory
    mode: '0700'

- name: "Extract alfred.zip into ~/Library/Application Support/Alfred"
  ansible.builtin.unarchive:
    src: /tmp/alfred.zip
    dest: "~/Library/Application Support/Alfred"
    remote_src: yes

- name: "Remove Alfred config zip file"
  ansible.builtin.file:
    path: /tmp/alfred.zip
    state: absent


# Karabiner configuration

- name: Create Karabiner config directory if it does not exist
  ansible.builtin.file:
    path: ~/.config/karabiner
    state: directory
    mode: '0755'

- name: Download Karabiner config file
  shell:
    cmd: 'op run --env-file="aws.env" -- aws s3 cp s3://cbw-app-data/karabiner/karabiner.json ~/.config/karabiner/karabiner.json'
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0


# SSH configuration

- name: Create SSH config directory if it does not exist
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
    mode: '0700'

- name: Download SSH config file
  shell:
    cmd: 'op run --env-file="aws.env" -- aws s3 cp s3://cbw-app-data/ssh/config ~/.ssh/config'
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0


# Zoom preferences

- name: "Set Zoom BounceApplicationSetting"
  community.general.osx_defaults:
    domain: us.zoom.xos
    key: BounceApplicationSetting
    type: int
    value: 2

- name: "Set Zoom BounceApplicationSetting"
  community.general.osx_defaults:
    domain: us.zoom.xos
    key: "Hotkey Have Shown Tip"
    type: int
    value: 1

# Shell configuration

- name: Check if ohmyzsh path exists
  stat:
    path: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
  register: ohmyzsh_path

- name: "Install oh-my-zsh"
  shell:
    cmd: 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"'
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0
  when: not ohmyzsh_path.stat.exists

- name: "Install fzf"
  shell:
    cmd: '/opt/homebrew/opt/fzf/install --all'
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0

- name: "Clone the Powrlevel10k zsh theme"
  ansible.builtin.git:
    repo: 'https://github.com/romkatv/powerlevel10k.git'
    dest: "{{ lookup('env', 'HOME') }}/.oh-my-zsh/custom/themes/powerlevel10k"

- name: "Clone the zsh autosuggestions"
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-autosuggestions'
    dest: "{{ lookup('env', 'HOME') }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"

- name: Download .zshrc file
  shell:
    cmd: 'op run --env-file="aws.env" -- aws s3 cp s3://cbw-app-data/zsh/zshrc ~/.zshrc'
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0

- name: Touch local config file
  copy:
    content: ""
    dest: ~/.zshrc.local
    force: false
    mode: 0400

# Bind apps to all spaces

- name: "Add app-bindings dict to com.apple.spaces"
  shell:
    cmd: '/usr/libexec/PlistBuddy -c "add app-bindings dict" ~/Library/Preferences/com.apple.spaces.plist'
  register: result
  check_mode: false
  changed_when: result == 0
  failed_when: result.rc != 0
  ignore_errors: true

- name: "Remove any current app:space bindings"
  shell:
    cmd: "/usr/libexec/PlistBuddy -c 'delete app-bindings:{{ item }}' ~/Library/Preferences/com.apple.spaces.plist"
  register: result
  check_mode: false
  changed_when: result == 0
  failed_when: result.rc != 0
  with_items: 
    - "{{ all_space_apps }}"
  ignore_errors: true

- name: "Bind apps to all spaces"
  shell:
    cmd: "/usr/libexec/PlistBuddy -c 'add app-bindings:{{ item }} string AllSpaces' ~/Library/Preferences/com.apple.spaces.plist"
  register: result
  check_mode: false
  changed_when: result == 0
  failed_when: result.rc != 0
  with_items: 
    - "{{ all_space_apps }}"

# gitconfig

- name: Download .gitconfig file
  shell:
    cmd: 'op run --env-file="aws.env" -- aws s3 cp s3://cbw-app-data/git/gitconfig ~/.gitconfig'
  when: personal_machine
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0

# sudo ssh key

- name: Export sudo ssh key
  shell:
    cmd: 'op read "op://Personal/e4vagt454kzpjt2h6gjo3tz2ai/private_key" > ~/.ssh/id_rsa_sudo'
  when: personal_machine
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0

